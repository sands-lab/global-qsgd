import torch
import gqsgd_cuda
from gqsgd import allreduce
input_a = torch.tensor([-8,-4,-2,-1,0,1,2,4,8],dtype=torch.float).cuda(2)
input_b = torch.tensor([-8,-4,-2,-1,0,1,2,4,8],dtype=torch.float).cuda(2)
input_c = torch.tensor([-8,-4,-2,-1,0,1,2,4,8],dtype=torch.float).cuda(2)
input_d = torch.tensor([-8,-4,-2,-1,0,1,2,4,8],dtype=torch.float).cuda(2)
print("Original Value:")
print(input_a)
print("")
global_norm = torch.tensor([8],dtype=torch.float).cuda(2)
print("Normalized Value:")
print(input_a/global_norm)
print("")
compressed_a = gqsgd_cuda.exponential_dithering_compress(input_a, global_norm)
compressed_b = gqsgd_cuda.exponential_dithering_compress(input_b, global_norm)
compressed_c = gqsgd_cuda.exponential_dithering_compress(input_c, global_norm)
compressed_d = gqsgd_cuda.exponential_dithering_compress(input_d, global_norm)
print("Compressed Value:")
print(compressed_a)
print("")
gqsgd_cuda.exponential_dithering_reduce(compressed_a, compressed_b)
gqsgd_cuda.exponential_dithering_reduce(compressed_c, compressed_d)
gqsgd_cuda.exponential_dithering_reduce(compressed_a, compressed_c)
print("Reduced Compressed Value:")
print(compressed_a)
print("")
decompressed_a = gqsgd_cuda.exponential_dithering_decompress(compressed_a, global_norm,4)
print(decompressed_a)